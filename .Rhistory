load(swirl)
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col = "red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind, airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
print(P)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[[x.limits]]
p[["x.limits"]]
table(t)
table(f)
xyplot(y~x|f, layout=c(2,1))
head(v1)
v1
v2
myedit("plot1.R")
source("plot1.R", local = TRUE)
source("plot1.R")
source("plot1.R", local = TRUE)
source("plot1.R", local = TRUE)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
diamonds
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat| color*cut,diamonds, strip = FALSE, pch=20, xlab = myxlab, ylab=myylab, main=mymain)
xyplot(price~carat| color*cut,diamonds, pch=20, xlab = myxlab, ylab=myylab, main=mymain)
colors(10)
sample(colors(10))
sample(colors(),10)
pal <-colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1, len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(1)
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p2 <- colorRampPalette(c("blue","green"))
p3 <- colorRampPalette(c("blue","green"), alpha=.5)
p3(5)
plot(x=x,y=y,pch=19,col=rgb(0,.5,.5)
)
plot(x=x,y=y,pch=19,col=rgb(0,.5,.5), aplha=.3)
plot(x=x,y=y,pch=19,col=rgb(0,.5,.5,.3))
cols <-brewer.pal(3,"BuGn")
cols
showme(cols)
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
`swirl()
)
swirl()
str(mpg)
qplot(displ~hwy,data=mpg)
qplot(displ~hwy,mpg)
qplot(displ,hwy,mpg)
qplot(x=displ,y=hwy,mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color=drv)
qplot(displ,hwy,data=mpg, color=drv,geom=smooth(method="lm"))
qplot(displ,hwy,data=mpg, color=drv,geom=c("point","smooth"))
qplot(hwy,data=mpg, color = dvr)
qplot(hwy,data=mpg, color = drv)
qplot(y=hwy,data=mpg, color = drv)
myhigh
qplot(drv,hwy,data = mpg, geom="boxplot")
qplot(drv,hwy,data = mpg, geom="boxplot", color = "manufacturer")
qplot(drv,hwy,data = mpg, geom="boxplot", color = manufacturer)
qplot(hwy,data = mpg, color = drv)
qplot(hwy,data = mpg, fill = drv)
qplot(drv,hwy,data = mpg, facet = .~drv)
qplot(displ,hwy,data = mpg, facet = .~drv)
qplot(displ, hwy, data = mpg, facet = .~drv)
qplot(displ, hwy, data = mpg, facet = . ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"), facets = . ~ dvr)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"), facets = .~dvr)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"), facets = .~drv)
g <- ggplot(mpg, aes("displ","hwy"))
g <- ggplot(mpg, aes(displ,hwy))
g
summary(g)
g+geom_point()
g+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+ facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+ facet_grid(.~drv)+ labs(ggtitle("Swirl Rules!"))
g+geom_point()+geom_smooth(method = "lm")+ facet_grid(.~drv)+ ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, aplha = .5)
g+geom_point(color = "pink", size = 4, aplha = 1\2)
g+geom_point(color = "pink", size = 4, aplha = 1/2)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!") + labs(x="Displacement", y="Hihg Milage")
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Milage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size =2, apha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
Type g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(color=drv)+ theme_bw(base_family = "times")
g+geom_point(color=dvr)+ theme_bw(base_family = "times")
g + geom_point(color=dvr, theme_bw(base_family = "times")
)
g+geom_point(color=dvr)+ theme_bw(base_family = "Times")
g+geom_point(color=drv)+ theme_bw(base_family = "Times")
g + geom_point(color=drv) + theme_bw(base_family = "Times")
g + geom_point(color = drv) + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim = c(-3,3))
g  <- ggplot(testdat,aes(myx,myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim= c(-3,3))
g  <- ggplot(testdat,aes(displl, hwy, color=factor(year))
)
g  <- ggplot(mpg,aes(displ, hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, se= TRUE)
g + geom_point() + facet_grid(drv~cyl, margin = TRUE)
g + geom_point() + facet_grid(drv~cyl, margin = TRUE) + geom_smooth(method = "lm", se = false, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margin = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margin = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Milage", title= "Swirl Rules!")
g + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth = 18497/30)
summary(brk)
brk
counts
qplot(price, data=diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color = cut
)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape=cut)
qplot(carat, price, data = diamonds, color=cut)
qplot(carat, price, data = diamonds, color=cut)+geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color=cut)+geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color=cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds,aes(depth,price))
g
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
summary(cutpoints)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds,aes(depth,price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm",size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth = 18497/30)
summary(brk)
brk
counts
qplot(price, data=diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color = cut
)
qplot(carat, price, data = diamonds, color=cut)+geom_smooth(method = "lm")
qplot(carat,price,data=diamonds)
qplot(carat, price, data = diamonds, shape=cut)
qplot(carat, price, data = diamonds, color=cut)
qplot(carat, price, data = diamonds, color=cut)+geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color=cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds,aes(depth,price))
g
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
summary(cutpoints)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds,aes(depth,price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm",size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
xyplot(carat,diamonds)
View(diamonds)
xyplot(carat, cut, diamonds)
xyplot(carat, cut, data=diamonds)
xyplot(color, cut, data=diamonds)
diamonds
str(diamonds)
xyplot(color, cut, diamonds)
xyplot(cut, diamonds)
xyplot(color~cut,diamonds)
xyplot(color~cut,data=diamonds)
par()
library(airquality)
library(datasets)
data("airquality")
data(airquality)
airquality
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
x <- ggplot(diamonds, aes(cut, price))
print(x)
qplot(cut,price, data = diamonds, smooth="loess"
)
load(swirl)
library(swrirl)
library("swrirl")
load("swirl")
swirl
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.5,col="red")
abline(h=.4,col="red")
5
5
6
4
12
abline(h=.5,col="red")
dist(dFsm)
hc
heatmap(dataMatrix, col= cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(x=cx,y=cy,col=c("red","orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, mean(distTmp), wich.min)
apply(distTmp, mean=2, wich.min)
apply(distTmp, mean=2, which.min)
apply(distTmp, mean(distTmp), which.min)
apply(distTmp, 2, which.min)
points(x=x,y=y,pch=19,cex=2, col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(x=newcx,y=newcy,pch=8,cex=2, col=cols1,lwd=2)
points(x=newCx,y=newCy,pch=8,cex=2, col=cols1,lwd=2)
points(newCx,newCy,pch=8,cex=2, col=cols1,lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
apply(x,newClust2,2)
apply(x,2,newClust2)
apply(x,newClust2,mean)
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalcx,finalCy,col=cols1, pch=9, cex=2, lwd=2)
points(finalcx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19, cex=2)
points(kmobj$centers,col=c("black","red","green"))
points(kmObj$centers,col=c("black","red","green"))
points(kmObj$centers,col=c("black","red","green"), cex=3, lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit "addPatt.R"
myedit("addPatt.R"
)
source("addPatt.R",local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
scd(scale(mat))
svd(scale(mat))
prcomp(scale(mat))
svd1$v
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <-(svd1$u[,1]) %*% (svd1$v[1]) %*% svd1$v
a1 <-(svd1$u[,1] %*% svd1$v[1]) %*% svd1$v
a1 <-(svd1$u[,1]) %*% (svd1$d[1]) %*% svd1$v
a1 <-(svd1$u[,1] %*% svd1$d[1]) %*% svd1$v
a1 <-(svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v)
a1 <-(svd1$u[,1]) %*% (svd1$d[1]) %*% t(svd1$v)
a1 <-(svd1$u[,1]) %*% (svd1$d[1]) %*% t(svd1$v)[]
a1 <-svd1$d[1] %*% t(svd1$v)
a1 <-svd1$d[1] %*% t(svd1$v) %*% svd$u[,1]
a1 <-svd1$d[1] %*% ((t(svd1$v) %*% svd$u[,1])
)
a1 <-svd1$d[1] %*% ((t(svd1$v) %*% svd$u[,1])
)
a1 <-svd1$d[1] %*% ((t(svd1$v) %*% svd$u[,1])
]
a1 <- (svd$u[,1] %*% svd1$d[1]) %*% t(svd1$v)
a1 <- t(svd1$v) %*% (svd$u[,1] %*% svd1$d[1])
a1 <- t(svd1$v) %*% (svd$u %*% svd1$d[1])
a1 <- t(svd1$v) %*% (svd1$u[,1] %*% svd1$d[1])
a1 <- t(svd1$v) %*% (svd1$u[,1] %*% svd1$d[1])
a1 <-svd1$d[1] %*% (t(svd1$v) %*% svd1$u[,1])
a1 <- (svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v)
a1 <-(svd1$d[,1] %*% t(svd1$v[1])) %*% svd1$u[,1]
a1 <-(svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v[,1])
a1 <-(svd1$u[,1] %*% svd1$d[1]) %*% svd1$v[,1]
a1 <-(svd1$u[,1] %*% svd1$d[1])
a1 <-svd1$u[,1] %*% svd1$d[1]
a1 <-svd1$u[1] %*% svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,2] %*% diag(svd1$d[1:2] %*% t(svd1$v[1:2])
)
a2 <- svd1$u[,2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[1:2]
)
a2 <- svd1$u[,2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[1:2])
a2 <- svd1$u[1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[1:2])
a2 <- svd1$u[1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[1:2])
a2 <- svd1$u[1:2] %*% diag(svd1$d[1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage()
myImage
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
name(ssd)
ssd$562
ssd[562:563]
names(ssd[,562:563])
table(ssd$subject)
str(ssd)
sum(table(ssd$subject))
ssd$activity
table(ssd$activity)
sub1 <-subset(ssd,1)
sub1 <-subset(ssd,subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <-hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <-dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <-svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1$[,10:12], maxCon)
mdist <- dist(sub1$[,10:12] %*% maxCon)
mdist <- dist(sub1$[,10:12] %*% t(maxCon)
mdist <- dist(c(sub1$[,10:12], maxCon)
mdist <- dist(c("sub1$[,10:12]", "maxCon")
)
mdist <- dist(sub1[,10:12,maxCon])
mdist <- dist(c(sub1[,10:12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity)
)
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <-kmeans(sub1[,-c(562:563)], centers = 6)
kClust <-kmeans(sub1[,-c(562:563)], centers = 6, nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying <- which(kcluster$size == 29)
laying <- which(kclust$size == 29)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab = "Laying Cluster")
names(sub1$[,1:3])
names(sub1$center[,1:3])
names(sub1[,1:3])
walkdown <-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19,ylab="walkdown Cluster")
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
setwd("F:/R WorkingDirectory/Reproducible_research1")
dataNoNA<- na.omit(dataOriginal)
dataOriginal <- read.csv(unzip("activity.zip", "activity.csv"), header = TRUE, sep=",")
dataNoNA<- na.omit(dataOriginal)
dataOriginal[is.na(dataOriginal$steps),]
dataNA <- dataOriginal[is.na(dataOriginal$steps),]
View(dataNA)
ASInterval <- aggregate(steps ~ interval, dataNoNA, mean)
View(ASInterval)
merge(x=dataNA, y=ASInterval, by = "interval", all.x = TRUE)
subset(merge(x=dataNA, y=ASInterval, by = "interval", all.x = TRUE), select = c(4,3,1))
View(dataNA)
str(subset(merge(x=dataNA, y=ASInterval, by = "interval", all.x = TRUE), select = c(4,3,1)))
str(dataNoNA)
library(plyr)
dataImputed <- rbind.fill(subset(merge(x=dataNA, y=ASInterval, by = "interval", all.x = TRUE), select = c(4,3,1)), dataNoNA)
View(dataImputed)
str(colnames(subset(merge(x=dataNA, y=ASInterval, by = "interval", all.x = TRUE), select = c(4,3,1))) <- c("steps","date","interval"))
dataMerged <- subset(merge(x=dataNA, y=ASInterval, by = "interval", all.x = TRUE), select = c(4,3,1))
colnames(dataMerged) <- c("steps","date","interval")
str(dataMerged)
dataImputed <- rbind.fill(dataMerged, dataNoNA)
View(dataImputed)
nulos <- is.na(dataImputed)
View(nulos)
rm("nulos")
str(dataImputed)
dataImputed <- cbind(DayType = '', dataImputed)
str(dataImputed)
View(dataImputed)
dataImputed <- rbind.fill(dataMerged, dataNoNA)
dataImputed <- cbind(Weekend = 'N', dataImputed)
View(dataImputed)
dataImputed <- rbind.fill(dataMerged, dataNoNA)
dataImputed <- cbind(Daytype = 'Weekday', dataImputed)
View(dataImputed)
View(dataImputed)
dataImputed$Daytype  <- ifelse(weekdays(dataImputed$date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
dataImputed$date <- as.Date(dataImputed$date)
dataImputed$Daytype  <- ifelse(weekdays(dataImputed$date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
str(dataImputed)
dataImputed[dataImputed$Daytype="weekend",]
dataImputed[dataImputed$Daytype=="weekend",]
library(ggplot2)
ASDaytype <- aggregate(steps ~ interval + Daytype, dataImputed, mean)
View(ASDaytype)
rm("ASDaytype")
ASImputedDaytype <- aggregate(steps ~ interval + Daytype, dataImputed, mean)
View(ASImputedDaytype)
qplot(interval, steps, data = ASImputedDaytype, facets = . ~ Daytype)
qplot(interval, steps, data = ASImputedDaytype, facets = . ~ Daytype, geom = c("bar"))
ggplot2.barplot(interval, steps, data = ASImputedDaytype, facets = . ~ Daytype)
qplot(interval, steps, data = ASImputedDaytype, facets = . ~ Daytype, geom = "bar")
qplot(x=interval, y=steps, data = ASImputedDaytype, facets = . ~ Daytype, geom = "bar")
qplot(x=interval, y=steps, data = ASImputedDaytype, facets = . ~ Daytype)
par(mar=c(10,5,1,1))
barplot(height = TSDay$steps, width = c(5),names.arg = TSDay$date, xlab = "", ylab = "# of Steps", main = "Total steps by day", col = "blue", las=2)
ataOriginal <- read.csv(unzip("activity.zip", "activity.csv"), header = TRUE, sep=",")
## ignoring NA Steps values in a new dataset
dataNoNA <- na.omit(dataOriginal)
TSDay <- aggregate(steps ~ date, dataNoNA, sum)
par(mar=c(10,5,1,1))
barplot(height = TSDay$steps, width = c(5),names.arg = TSDay$date, xlab = "", ylab = "# of Steps", main = "Total steps by day", col = "blue", las=2)
wd()
wdir()
setwd("F:/R WorkingDirectory/Reproducible_research1")
getwd()
par(mar=c(10,5,1,1))
png(file = getwd() + '//figure//Figure1.png')
barplot(height = TSDay$steps, width = c(5),names.arg = TSDay$date, xlab = "", ylab = "# of Steps", main = "Total steps by day", col = "blue", las=2)
dev.off()
par(mar=c(10,5,1,1))
png('F://R WorkingDirectory//Reproducible_research1//Figures//Figure1.png')
barplot(height = TSDay$steps, width = c(5),names.arg = TSDay$date, xlab = "", ylab = "# of Steps", main = "Total steps by day", col = "blue", las=2)
dev.off()
